[//]: # (0)
### Curso Angular + Spring Boot

* Objetivos macros
  * Angular
  * Spring Boot
  * **Construção Aplicação Completa**

---

[//]: # (2)
### arquiteturas web tradicionais

<div class="center" style="margin: 0 auto; max-width: 80%;">
  ![Legacy](img/legacy-arch.png)
</div>

--

[//]: # (2/2)

### arquiteturas web tradicionais - desvantagens

- Servidor Web é responsável pela construção das páginas Web e pela lógica de negócio
- O estado do cliente (sessão) é mantido no servidor
- Maior uso de recursos computacionais (processamento e memória)
- Quanto maior o número de clientes, maior o tempo de resposta
- **Baixa escalabilidade**

---

[//]: # (3)

### arquiteturas web modernas

- SPA: *Single Page Application* ou **Aplicação de uma Única Página**
- Todos os recursos (HTML, Javascript, CSS) são recuperados de uma única vez ou carregados dinamicamente conforme a necessidade (em resposta à ação do usuário)
- Não há **_reloads_** ou transferência de controle para outra página
- A ideia é prover uma **UX similar** a de uma **aplicação nativa** (desktop / mobile)
- Frameworks Javascripts
  - AngularJS, Angular, ReactJS, Vue.js, Ember.js, Meteor.js (...)

--

[//]: # (3/2)

### arquiteturas web modernas

- Servidor delega a lógica de construção das páginas Web para o cliente
  - Renderização dinâmica de páginas HTML
  - Fluxos e navegação entre páginas e etc.
- Somente a lógica de negócio é implementada no lado servidor
  - Regras de negócio, persistência, segurança e etc
- Padrão de-facto para aplicações na nuvem

--

[//]: # (3/3)

### arquiteturas web modernas - imagem

<div class="center">
  ![](img/modern-app.png)
</div>

--

[//]: # (3/4)

### arquiteturas web modernas

- Servidor Web é responsável somente pela lógica de negócio
- Melhor UX: depois do download da aplicação, somente dados são trafegados
- Maior interoperabilidade e reuso de serviços (APIs)
- **Alta escalabilidade**

--

[//]: # (3/5)

### escalabilidade

<div class="center">
  ![](img/vertical_vs_horizontal_scaling.png)
</div>

---

[//]: # (4)

### angular: o que é?

- É uma plataforma open-source para o desenvolvimento front-end de aplicações Web
  - Framework para a implementação de SPA
- Baseado em TypeScript
  - Linguagem de programação
  - É um super-conjunto do JavaScript com suporte a tipificação
  - Browsers não executam TypeScript, por isso o código deve ser **transpilado** para JavaScript
- Mantido pela Google e por uma comunidade de indivíduos e organizações
- É o resultado da reescrita total do AngularJS

--

[//]: # (4/2)

### angular: visão geral da arquitetura

- Uma aplicação Angular é composta por:
  - **Templates:** HTML com sintaxe Angular;
  - **Components:** controlam a visão e a interação com o usuário;
  - **Services:** encapsulam um valor, função ou funcionalidade;
  - **Modules:** empacotam tudo isso de uma forma coesa.

--

[//]: # (4/3)
### angular: visão geral da arquitetura


<div class="center">
  ![](img/angular-arch.png)
</div>

---

[//]: # (5)

### instalação

- Pré-requisitos
- Angular CLI
- A Anatomia de uma Aplicação Angular
- Suporte a Browsers

--

[//]: # (5/2)

### pré-requisitos

- Node.js
  - Ambiente de execução JavaScript
    - Assíncrono e orientado a eventos
  - Versão v8.9.x ou superior
    - `$ node -v`
- npm: Node Package Manager
  - Gestão de dependências e bibliotecas JavaScript
  - Versão 5.x.x ou superior
    - `$ npm -v`

--

[//]: # (5/3)

### pré-requisitos

- nvm: Node Version Manager
  - Script para a gestão de múltiplas versões do Node.js e npm
  - `$ nvm --version`

--

[//]: # (5/4)

### [exercício 01](../exercicios/exercicio-01)

- Objetivo: instalar nvm, Node.js e npm
- Tempo: [15’](https://e.ggtimer.com/15minutes)

---

[//]: # (6)

### angular cli

- Ferramentas CLI são uma tendência no desenvolvimento de aplicações Frontend
  - Scaffolding, scripting, automação de processos etc
- Angular CLI permite criar aplicações Angular rapidamente
  - Funcionalidades para facilitar o desenvolvimento (por exemplo: hot-reload, serve, test etc)
  - Seguindo as boas práticas e convenções
- Para instalar o Angular CLI:
  - `$ npm install -g @angular/cli`
- Para criar uma novo projeto Angular:
  - `$ ng new app-exemplo`

---

[//]: # (7)

### a anatomia da aplicação

- O projeto criado pelo Angular CLI possui vários arquivos
  - Os arquivos mais importantes estão nas pastas **src** e **e2e**
  - Os outros arquivos configuram o ambiente de desenvolvimento e raramente mudam
- Pasta **src**
  - Contém o código-fonte da aplicação (arquivos TypeScript, HTML, CSS)
- Pasta **e2e**
  - Pasta com os testes ponto-a-ponto (end-to-end) da aplicação
  - Testes e2e são escritos em Jasmine e são executados com protractor

--

[//]: # (7/2)

### a anatomia da aplicação

| ARQUIVO           | DESCRIÇÃO                                                                                                               |
| ----------------- | ----------------------------------------------------------------------------------------------------------------------- |
| src/app/          | Arquivos da aplicação Angular. Ex: app.component.ts, app.module.ts                                                      |
| node_modules/     | Bibliotecas JavaScript instaladas via npm.                                                                              |
| package.json      | Identifica as dependências npm do projeto. Lista também os comandos para executar a aplicação, testes unitários e mais. |
| src/assets/       | Arquivos estáticos importados pela aplicação (por exemplo: CSS, imagens, fontes etc).                                   |
| src/environments/ | Arquivos de definição de variáveis de ambientes utilizadas no processo de construção da aplicação.                      |

--

[//]: # (7/3)

### a anatomia da aplicação

| ARQUIVO          | DESCRIÇÃO                                                                                                                      |
| ---------------- | ------------------------------------------------------------------------------------------------------------------------------ |
| src/styles.css   | Descreve as regras de estilo CSS globais da aplicação.                                                                         |
| src/index.html   | A página única da aplicação. Carrega alguns scripts essenciais em uma ordem pré-definida e depois carrega a aplicação Angular. |
| src/favicon.ico  | O ícone da aplicação que aparece na aba do browser.                                                                            |
| src/polyfills.ts | Arquivo que configura os Polyfills utilizados pela aplicação.                                                                  |

--

[//]: # (7/4)

### a anatomia da aplicação

| ARQUIVO                | DESCRIÇÃO                                                                                                                   |
| ---------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| src/main.ts            | Arquivo que configura a compilação da aplicação com o compilador JIT e inicializa o módulo principal da aplicação.          |
| src/test.ts            | Arquivos de configuração para a execução de testes unitários com Karma.                                                     |
| src/tsconfig.app.json  | Descreve como o compilador TypeScript transpila o código-fonte para JavaScript.                                             |
| src/tsconfig.spec.json | Descreve como o compilador TypeScript transpila o código-fonte para JavaScript (usado para a execução de testes unitários). |

--

[//]: # (7/5)

### a anatomia da aplicação

| ARQUIVO          | DESCRIÇÃO                                                                                                |
| ---------------- | -------------------------------------------------------------------------------------------------------- |
| src/typings.d.ts | Arquivo de definição de tipos TypeScript para as bibliotecas JavaScript que não definiram seus tipos.    |
| karma.conf.js    | Arquivo de configuração para a execução de testes unitários com Karma.                                   |
| .editorconfig    | Configurações padronizadas usadas por diversos editores de código. [Veja mais.](http://editorconfig.org) |
| .gitignore       | Arquivos e pastas que o GIT deve ignorar.                                                                |

--

[//]: # (7/6)

### a anatomia da aplicação

| ARQUIVO           | DESCRIÇÃO                                                                                                          |
| ----------------- | ------------------------------------------------------------------------------------------------------------------ |
| e2e/              | Pasta com os testes ponto-a-ponto (end-to-end) da aplicação, escritos em Jasmine e executados com protractor.       |
| protractor.conf.js | Configuração do protractor (para a execução de testes e2e).                                                         |
| README.md         | Instruções básicas de como usar o Angular CLI para desenvolver a aplicação.                                        |
| tsconfig.json     | Descreve como o compilador TypeScript transpila o código-fonte para JavaScript (usado para a integração com IDEs). |

--

[//]: # (7/7)

### a anatomia da aplicação

| ARQUIVO      | DESCRIÇÃO                                                                                                                              |
| ------------ | -------------------------------------------------------------------------------------------------------------------------------------- |
| tslint.json  | Arquivo de configuração do validador de código-fonte TypeScript. Define regras de validação de acordo com o guia de estilo do Angular. |
| angular.json | Arquivo de configuração do Angular CLI.                                                                                                |

---

[//]: # (8)

### [exercício 02](../exercicios/exercicio-02)

- Objetivo: instalar o Angular CLI, criar e rodar a primeira aplicação Angular
- Tempo: [15’](https://e.ggtimer.com/15minutes)

---

[//]: # (9)

### suporte a browsers

- Angular suporta a maioria dos browsers mais recentes
  ![](img/suporte-browsers.png)
- A integração contínua do Angular roda testes unitários em todos esses browsers

--

[//]: # (9/2)

### suporte a browsers

- Angular é construído baseado nos padrões mais modernos da plataforma Web
  - Nem todos os browsers suportam essas funcionalidades
- _Polyfills_
  - Scripts que implementam as funcionalidades que não são suportadas pelo browser
  - Dependendo do browser alvo e das funcionalidades do Angular que sua aplicação precisa, você irá carregar um ou mais polyfills
  - Polyfills não transformam um navegador lento e antigo em um navegador rápido e moderno!

--

[//]: # (9/3)

### suporte a browsers

- Polyfills obrigatórios para rodar uma aplicação Angular, de acordo com o browser:

  ![](img/polyf-req.png)

--

[//]: # (9/4)

### suporte a browsers

- Polyfills opcionais de acordo com a funcionalidade e browser:
  ![](img/polyf-opc.png)

---

[//]: # (10)

### arquitetura

<!-- Ref: https://angular.io/guide/architecture -->

- Visão Geral
- Módulos
- Componentes
- Templates
- Metadata
- Data Binding
- Diretivas
- Serviços
- Injeção de Dependências

--

[//]: # (10/2)

### visão geral

- Para escrever uma aplicação Angular, você compõe **templates** HTML, que são gerenciados por **componentes**, que por sua vez se comunicam com **serviços**.
- Os **templates** são compostos por **diretivas** e expressões especiais próprias do Angular
- Os **componentes** gerenciam o comportamento dos **templates** por meio do **data binding**
  - Propriedades e eventos
- Os **serviços** são responsáveis por tarefas específicas e bem-definidas da aplicação
  - Componentes são mantidos "limpos"

--

[//]: # (10/3)

### visão geral

- Os **templates**, **componentes** e **serviços** são empacotados em **módulos**
  - Blocos coesos e dedicados a um conjunto de funcionalidades relacionadas
- **Metadados** são decoradores TypeScript que descrevem como o Angular deve processar as classes, identificando-as como **componentes**, **diretivas** e **módulos**.
- **Serviços** são instanciados pelo mecanismo de **injeção de dependências**
  - Esse mecanismo mantém um container de instâncias criadas e as reusa apropriadamente

--

[//]: # (10/4)

### visão geral

<div class="center">
  ![](img/angular-arch.png)
</div>

---

[//]: # (11)

### módulos

- O Angular possui um sistema próprio de modularização
  - Angular Modules ou NgModules
- Toda aplicação Angular possui pelo menos um módulo (chamado de "**root module**")
  - Por padrão, é o **AppModule**
- Em aplicações pequenas, o **AppModule** pode ser o único módulo da aplicação
- Em aplicações maiores, é comum que existam vários módulos
  - Cada módulo é responsável por um conjunto de funcionalidades (domínio)

--

[//]: # (11/2)

### módulos

- Um módulo é uma classe com o decorador `@NgModule`, que descreve o módulo
- As principais propriedades do decorador `@NgModule` são:
  - **declarations**: declara as classes de visão (componentes, diretivas ou pipes) do módulo;
  - **exports**: um subconjunto do **declarations** que pode ser usado em outros módulos;
  - **imports**: declara os módulos cujas classes exportadas são utilizadas neste módulo;
  - **providers**: declara como instanciar os serviços que são utilizados em toda a aplicação;
  - **bootstrap**: declara a visão principal da aplicação ("**root** **component**")

--

[//]: # (11/3)

### módulos

- Exemplo de um **root module**

```javascript
// src/app/app.module.ts

import { NgModule } from "@angular/core";
import { BrowserModule } from "@angular/platform-browser";
import { FormsModule } from "@angular/forms"; // <-- o "NgModel" faz parte do "FormsModule"

import { AppComponent } from "./app.component";

@NgModule({
  imports: [
    BrowserModule,
    FormsModule // <-- importe o "FormsModule"
  ],
  declarations: [AppComponent],
  bootstrap: [AppComponent]
})
export class AppModule {}
```

--

[//]: # (11/4)

### módulos

- Para executar a aplicação, é feito o **_bootstrap_** do **_root module_** como abaixo

```javascript
// src/main.ts

import { platformBrowserDynamic } from "@angular/platform-browser-dynamic";
import { AppModule } from "./app/app.module";
platformBrowserDynamic().bootstrapModule(AppModule);
```

---

[//]: # (12)

### componentes

- Um **componente** é uma classe JavaScript que controla um pedaço da tela chamada **visão**
- O **componente** interage com a visão através de propriedades e métodos

```javascript
export class CursoComponent {
  titulo = 'Curso Angular + Spring Boot';
  subtitulo = '';

  onClick() {
    this.subtitulo = 'Construção de uma aplicação';
  }
}
```

--

[//]: # (12/2)

### componentes

- Os **componentes** são criados, atualizados e destruídos pelo Angular conforme a necessidade
- A aplicação pode agir em cada um desses momentos com os **lifecycle hooks**
- **ngOnInit, ngOnChanges, ngOnDestroy...**

```javascript
export class CursoComponent implements OnInit {
  titulo = 'Curso Angular + Spring Boot';
  subtitulo = '??';

  ngOnInit() {
    this.subtitulo = '?';
  }

  onClick() {
    this.subtitulo = 'Construção de uma aplicação';
  }
}
```

--

[//]: # (12/3)
### Componentes

Podemos gerar um componente pelo Angular CLI
```bash
ng generate component aluno
```

```bash
CREATE src/app/aluno/aluno.component.css (0 bytes)
CREATE src/app/aluno/aluno.component.html (24 bytes)
CREATE src/app/aluno/aluno.component.spec.ts (621 bytes)
CREATE src/app/aluno/aluno.component.ts (265 bytes)
UPDATE src/app/app.module.ts (1040 bytes)
```
Esse comando gera um componente de nome `Aluno` na pasta `src/app/aluno` com um arquivo de template e um arquivo de CSS associados. Além disso, ele já declara o componente no módulo apropriado.

--

[//]: # (12/4)

### templates

- O **template** define como o Angular deve renderizar o **componente**
- É semelhante a um HTML simples, mas pode ter marcações próprias do Angular

```html
<h1>{{titulo}}</h1>
<h2>{{subtitulo}}</h2>
<button (click)="onClick()">Clique</button>
 ```

--

[//]: # (12/5)

### templates

- A **interpolação** avalia uma expressão e a converte para uma string

```html
<p>A soma de 1 + 1 é {{1 + 1}}</p>
```

- Geralmente, a expressão é uma propriedade do **componente**

```html
<h1>{{titulo}}</h1>
```

- A expressão também pode invocar métodos do **componente**

```html
<h3>
    {{getTitulo()}}
</h3>
```

--

[//]: # (12/6)

### templates

- As **expressões** não produzem efeitos colaterais (além de atualizar a propriedade, é claro)
- Sintaxe semelhante ao JavaScript
- Proibido: new; incremento e decremento (++ e –-); atribuições (=, +=, -=, …); encadeamento de expressões (; ou ,);

--

[//]: # (12/7)

### templates

- Uma **ação** (_statement_) responde a um evento

```html
<button (click)="onClick()">Clique</button>
```

- As **ações** produzem efeitos colaterais
  - Atualizam o _estado da aplicação_ a partir da interação do usuário
- Sintaxe semelhante ao JavaScript
  - Proibido: new; incremento e decremento (++ e –); operadores de atribuição (+=, -=, …)
  - Permitido: atribuição básica (=); encadeamento de expressões (; ou ,)

--

[//]: # (12/8)
### data binding

- **Data binding** é um mecanismo para coordenar a interação entre **template** e **componente**
- Existem 4 formas de se fazer **data binding** e cada forma tem uma direção

<div class="center">
  ![Formas Data Binding](img/formas-data-bind.png)
</div>

--

[//]: # (12/9)

### data binding

```html
Valor Atual:{{valor}}
<div>one-way</div>
<input name="valor" [ngModel]="valor" type="number">
<div>two-way</div>
<input name="valor" [(ngModel)]="valor" type="number">
<button (click)="dobrar()">dobrar</button>
```

- A expressão **{{valor}}** é uma **interpolação**
- A expressão **[(ngModel)]** é um **two-way data binding**
  - Combina o **binding de propriedade** e o **binding de evento** em uma notação única
  - O valor da propriedade **valor** do componente é exibida no elemento **input**
  - As mudanças no valor do elemento **input** são enviadas de volta ao componente
- A expressão **(click)** é um **binding de evento**
  - O método **dobrar** é invocado quando o usuário clica no elemento `<button>`

---

[//]: # (13)

### diretivas

- Uma **diretiva** é uma classe com o decorador `@Directive`
- As **diretivas** transformam o **template**, dando seu caráter dinâmico
- Um **componente** é uma **diretiva** com um **template**!
- As **diretivas** podem ser classificadas em dois tipos:
  - **Estruturais**: alteram o DOM adicionando, removendo ou trocando elementos
  - **De Atributo**: alteram a aparência ou comportamento de um elemento que já existe

--

[//]: # (13/2)

### diretivas

- **ngFor**, **ngIf** e **ngSwitch** são **diretivas** **estruturais** embarcadas com o Angular
- **ngFor** cria um elemento para cada item de uma lista
- **ngIf** inclui (ou não) um elemento no DOM
- **ngSwitch** inclui um único elemento a partir de uma lista de possíveis elementos
- valores = [1, 2, 3, 4, 5, 6, 7];

```html
                                                   // Resultado
  <div *ngFor="let valor of valores">              // 1 Um
    <span *ngIf="valor != 4">{{valor}} </span>     // 2 Dois
    <ng-container [ngSwitch]="valor">              // 3 Outros
        <span *ngSwitchCase="1">Um</span>          // Outros
        <span *ngSwitchCase="2">Dois</span>        // 6 Outros
        <span *ngSwitchDefault>Outros</span>       // 7 Outros
    </ng-container>
  </div>
```

--

[//]: # (13/3)

### diretivas

- **ngModel**, **ngStyle** e **ngClass** são **diretivas de atributo** embarcadas com o Angular
- **ngModel**: implementa o **two-way data binding** em um elemento
- **ngStyle**: definição dinâmica de regras CSS (inline) em um elemento
- **ngClass**: atribuição dinâmica de classes CSS em um elemento

```html
<h3>De atributo</h3>
<h4>String, também pode se usar um array de strings ['numero', 'lista']</h4>
<span *ngFor="let valor of valores">
  <span [ngClass]="'numero'">{{valor}} </span>
</span>

<h4>Objeto</h4>
<span *ngFor="let valor of valores">
  <span [ngClass]="{'numero': true, 'impar': valor % 2 != 0, 'par': valor %2 == 0}">{{valor}} </span>
</span>
```

--

[//]: # (13/4)

### diretivas

- Você pode criar suas próprias **diretivas** customizadas
- As **diretivas** customizadas devem ser declaradas em um **módulo** da aplicação
- Ao nomear suas **diretivas**, sempre utilize um prefixo (o prefixo "ng" já é reservado)

```html
<input type="text" appSonumeros>
```

```javascript
import { Directive, HostListener } from '@angular/core';

@Directive({selector: '[appSonumeros]'})
export class SonumerosDirective {

  @HostListener('keydown', ['$event'])
  onKeyDown(e: KeyboardEvent) {
    // ...
  }
}

```

--

[//]: # (13/5)

### diretivas

- As **diretivas** customizadas podem responder a eventos do elemento "hospedeiro"

```javascript
import { Directive, HostListener } from '@angular/core';

@HostListener('keydown', ['$event'])
onKeyDown(e: KeyboardEvent) {
  // ...
}

@HostListener('mouseenter') onMouseEnter() {
  // ...
}
```

--

### diretivas

```bash
ng generate directive sonumeros
```

```bash
CREATE src/app/sonumeros.directive.spec.ts (236 bytes)
CREATE src/app/sonumeros.directive.ts (147 bytes)
UPDATE src/app/app.module.ts (1124 bytes)
```

```javascript
import { Directive } from '@angular/core';

@Directive({
  selector: '[appSonumeros]'
})
export class SonumerosDirective {

  constructor() { }

}
```

---

[//]: # (14)

### serviços

- Os **serviços** encapsulam um valor, função ou funcionalidade de que a aplicação precisa
  - Ou seja: quase tudo pode ser um **serviço**!
- Um **serviço** é tipicamente uma classe com uma responsabilidade bem-definida
  - Exemplos: logging, recuperação de dados, cálculo de taxas etc
- Os **componentes** são grandes consumidores de **serviços**
  - Um **componente** deve ser "enxuto" e, por isso, delega tarefas não triviais para os **serviços**
  - Os **serviços** estão disponíveis para uso pelos **componentes** através da **injeção de dependências**

--

[//]: # (14/2)

### serviços

Gerando um serviço

```bash
ng g service contador
```

```bash
CREATE src/app/contador.service.spec.ts (343 bytes)
CREATE src/app/contador.service.ts (137 bytes)
```

```javascript
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class ContadorService {
  constructor() { }
}
```

--

[//]: # (14/3)

### injeção de dependências

- A **injeção de dependências** é uma forma de, ao se criar uma nova instância de uma classe, prover instâncias das dependências dessa classe
- Comumente, o Angular usa a **injeção de dependências** para prover aos **componentes** os **serviços** dos quais necessitam
- O Angular sabe quais são esses **serviços** pela assinatura do construtor do **componente**

```javascript
constructor(private service: ContadorService) {}
```

--

[//]: # (14/4)

### injeção de dependências

- O Angular mantém um container de instâncias de **serviços** criadas anteriormente
- Quando um **componente** é criado, seus **serviços** são recuperados desse **container**
- Você deve dizer ao Angular como criar novas instâncias de um **serviço**
- Isto é, você deve registrar uma fábrica do **serviço**
- A fábrica é algo que pode criar ou retornar uma instância do **serviço**
- Você pode registrar a fábrica em **módulos** ou em **componentes**
  - Em um **módulo**, a mesma instância do **serviço** é disponível para todos os **componentes** desse **módulo** (_singleton_)
  - Em um **componente**, uma nova instância do **serviço** será criada para cada nova instância do **componente**

--

[//]: # (14/5)

### injeção de dependências

- Fábrica no nível de **módulo**

```javascript
@NgModule({
  // ...
  providers: [
    BackendService,
    ContadorService
  ],
  // ...
})
```

- Fábrica no nível de **componente**

```javascript
@Component({
  selector: 'app-contador',
  templateUrl: './contador.component.html',
  providers: [ ContadorService ]
})
```

---

[//]: # (15)
### [exercício 03](../exercicios/exercicio-03)

- Objetivo: Fixar conhecimento de componentes, diretivas e serviços

---

[//]: # (16)
### Navegação com Rotas

- Uma rota define qual é o componente que deve ser exibida de acordo com a URL
- O usuário pode clicar em um link ou colar a URL na barra de navegação do browser
- As rotas são definidas por um array
- Normalmente define-se para cada elemento do array as propriedades:
  - **path**: o router checa esse caminho com a URL na barra de navegação do browser
  - **component**: define o componente que deve ser criado quando se navega para essa rota

--

[//]: # (16/2)
### Navegação com Rotas - definição

```javascript
import { RouterModule, Route } from '@angular/router';
// ...

const rotas: Route[] = [
  { path: '', pathMatch: 'full', redirectTo: '/intro' },
  { path: 'intro', component: IntroducaoComponent},
  { path: 'bind', component: BindComponent},
  { path: 'diretivas', component: DiretivasComponent}
];

@NgModule({
  declarations: [
    AppComponent,
    IntroducaoComponent,
    BindComponent,
    DiretivasComponent,
    ContadorComponent
  ],
  imports: [
    BrowserModule, RouterModule.forRoot(rotas)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

--

[//]: # (16/3)
### Navegação com Rotas

- Para exibir os componentes na navegação, adicione a tag **&lt;router-outlet&gt;** no template
  - O **RouterOutlet** é uma diretiva do **RouterModule**
  - É abaixo desse elemento que o router exibe o componente associado à rota
- Para navegar entre as visões, adicione um atributo **routerLink** nos elementos **&lt;a&gt;**
  - O **RouterLink** também é uma diretiva do **RouterModule**
  - O valor do atributo deve ser o **path** da rota de navegação

--

[//]: # (16/4)
### Navegação com Rotas - uso

- Sem rotas

```html
<!-- <app-introducao></app-introducao> -->
<!-- <app-bind></app-bind> -->
<app-app-diretivas></app-diretivas>
```

- com rotas

```html
<a [routerLink]="['/intro']">Introdução</a>
<a [routerLink]="['/bind']">Data Binding</a>
<a [routerLink]="['/diretivas']">Diretivas</a>
<router-outlet></router-outlet>
```

--

[//]: # (16/5)
### Navegação com Rotas Parametrizadas

- Pode-se passar valores para os componentes roteados.

Exemplo:
```
{ path: 'turmas/:id', component: TurmaComponent},
```

- Esse valores podem ser acessado dessa forma:

```
export class TurmaComponent implements OnInit {

  constructor(private route: ActivatedRoute) { }

  ngOnInit() {
    const id = this.route.snapshot.paramMap.get('id');
    // usar o id para chamar um serviço
  }
}
```

---

[//]: # (17)
### Pipes

- Um pipe transforma dados de entrada para uma saída com um formato desejado
- Um pipe pode aceitar qualquer número de parâmetros opcionais
- Para passar parâmetros para um pipe, utiliza-se os dois-pontos (`:`) após o nome do pipe, seguido pelo valor do parâmetro
- Se o pipe aceitar múltiplos parâmetros, os valores são separados por dois-pontos
- Pipes disponíveis: *Date*, *UpperCase*, *LowerCase*, *Currency* e *Percent*

```html
 12345678.12 | currency                              --> $12,345,678.12
 12345678.12 | currency : 'BRL' : 'symbol'           --> R$12,345,678.12
 12345678.12 | currency : 'BRL' : 'symbol' : '1.2-2' --> R$12,345,678.12
 12345678.1  | currency : 'BRL' : 'symbol' : '1.2-2' --> R$12,345,678.10
         .12 | currency : 'BRL' : 'symbol' : '1.2-2' --> R$0.12
          .1 | currency : 'BRL' : 'symbol' : '1.2-2' --> R$0.10
      .12345 | currency : 'BRL' : 'symbol' : '1.2-3' --> R$0.123
```

--

[//]: # (17/2)
### Pipes - Personalizados

**Gerar:**

```sh
ng generate pipe pipes/par
```

**Código:**

```javascript
import { Pipe, PipeTransform } from '@angular/core';
@Pipe( { name: 'par' } )
export class ParPipe implements PipeTransform {
  transform(numeros: number[]): number[] {
    return numeros.filter(n => n % 2 === 0);
  }
}
```

**Uso:**

```html
{{ [1,2,3,4,5,6,7,8,9,10] | par }}
```

---

### Backend - Spring Boot

# Backend

---

### Protocolo HTTP - Métodos

- GET

```
GET alunos
GET alunos/1
```

- POST

```
POST alunos
{ "nome": "oto", "sede": {"id": 1}}

```

- PUT

```
PUT alunos/1
{ "nome": "ivo" }

```

- DELETE

```
DELETE alunos/1
```

--

### Protocolo HTTP - Headers

Requisição

```
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJuYUBuYS5jb20uYnIiLCJleHAiOjE1NTEwNDQ0NDAsIlJPTEVTIjoiUk9MRV9BRE1JTiJ9.TsXR5aA9KPt1VX37IDiZkmfcx1t6FW_V-0sdii78YJrtXyiVqTET6enJbtM-rlT9bl5mW2cijw4usthhihIVKw
```

Resposta

```
HTTP/1.1 200 OK
Date: Fri, 17 May 2019 22:32:00 GMT
Content-Type: text/html; charset=ISO-8859-1
```

--

### Protocolo HTTP - Códigos de Resposta

- 200 **OK** - Deve ser usado para indicar sucesso não específico.
- 201 **Created** - Deve ser usado para indicar a criação bem-sucedida de recursos
- 204 **No Content** - Deve ser usado quando o corpo da resposta for intencionalmente vazio
- 400 **Bad Request** pode ser usado para indicar falha não específica
- 401 **Unauthorized** - Deve ser usado quando há um problema com as credenciais do cliente
- 403 **Forbidden** - Deve ser usado para proibir o acesso independentemente estado de autorização
- 404 **Not found** - Deve ser usado quando não existir um recurso no URI informado pelo cliente
- 500 **Internal Server Error** - Deve ser usado para indicar erro do lado da API (servidor)

---

### Design de API REST

- Versionamento

```
https://nafortaleza.com.br:8443/pedagogia/api/v1/materias
```

- Sublinhados (_) não devem ser usados em URIs
- Os caminhos devem ser definidos com letras minúsculas
```
https://nafortaleza.com.br:8443/pedagogia/api/v1/turmas
```

- Os caminhos devem ser definidos em spinal case
```
https://nafortaleza.com.br:8443/pedagogia/api/v1/entregas-tema
```

- Os caminhos devem conter a forma plural de recursos e o método HTTP deve definir o tipo de ação a ser executada no recurso
```
GET https://nafortaleza.com.br:8443/pedagogia/api/v1/turmas/1
DELETE https://nafortaleza.com.br:8443/pedagogia/api/v1/turmas/1

```

---

### Spring Boot - O que é?

- *Spring Boot* torna fácil criar uma aplicação *Spring stand-alone*;
- Ele toma uma série de decisões inteligentes por nós, tanto para os elementos da plataforma Spring como para as bibliotecas de terceiros;
- Normalmente, as aplicações Spring Boot, precisam de muito poucas configurações;
- Servidor Web embutido (Tomcat, Jetty or Undertow)
- Início rápido - https://start.spring.io
- IDE de desenvolvimento - https://spring.io/tools

---

### Agenda

- Criar uma aplicação
-


---

---
[//]: # (18)

### Aprofundando os estudos

<div class="center shadow">
<i class="fa fa-graduation-cap fa-8x"></i>
</div>

- [https://angular.io](https://angular.io/)
- [https://cli.angular.io](https://cli.angular.io/)
- [https://material.angular.io](https://material.angular.io/)
- [https://blog.angular-university.io/](https://blog.angular-university.io/)
- [https://youtube.com](https://youtube.com/)
- [https://spring.io/projects/spring-boot](https://spring.io/projects/spring-boot)

